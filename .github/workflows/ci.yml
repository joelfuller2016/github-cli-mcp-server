name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Check code formatting
      run: npm run format -- --check

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Check for vulnerabilities
      run: npm audit --audit-level high --production

  validate:
    name: Validate MCP Server
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate MCP server starts
      run: |
        timeout 10s npm start &
        sleep 5
        echo "MCP server validation completed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_OWNER: test
        GITHUB_REPO: test

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Verify package.json
      run: npm run setup:check || echo "GitHub CLI not available in CI"
    
    - name: Check for unused dependencies
      run: |
        npx depcheck --ignores="@types/*,eslint,prettier" || echo "Dependency check completed with warnings"

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    needs: [test, security, validate, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check version consistency
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        SERVER_VERSION=$(grep -o '"version": "[^"]*"' src/unified-server.js | cut -d'"' -f4)
        echo "Package version: $PACKAGE_VERSION"
        echo "Server version: $SERVER_VERSION"
        if [ "$PACKAGE_VERSION" != "$SERVER_VERSION" ]; then
          echo "‚ùå Version mismatch between package.json and server!"
          exit 1
        fi
        echo "‚úÖ Versions are consistent"
    
    - name: Validate README
      run: |
        if [ ! -f README.md ]; then
          echo "‚ùå README.md is missing"
          exit 1
        fi
        echo "‚úÖ README.md exists"
    
    - name: Check for .env.example
      run: |
        if [ ! -f .env.example ]; then
          echo "‚ùå .env.example is missing"
          exit 1
        fi
        echo "‚úÖ .env.example exists"

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [test, security, validate, build]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Success notification
      run: |
        echo "üöÄ All CI/CD checks passed successfully!"
        echo "‚úÖ Tests: Passed"
        echo "‚úÖ Security: Passed" 
        echo "‚úÖ Validation: Passed"
        echo "‚úÖ Build: Passed"
        echo "Repository is ready for deployment!"
